from django.shortcuts import render_to_response__author__ = 'reza'# -*- coding: utf-8 -*-import osimport reimport timeimport jsonimport uuidimport randomimport hashlibimport datetimefrom .forms import *from .models import *from uuid import UUIDfrom BarnameNevisan import jalalifrom django.contrib.auth.models import Userfrom django.core.mail import send_mailfrom django.conf import settingsfrom BarnameNevisan import jalalifrom django.shortcuts import renderfrom django.core.exceptions import ValidationErrorfrom django.views.decorators.csrf import csrf_exemptfrom django.utils.safestring import mark_safefrom django.template import Libraryfrom django.contrib.auth.decorators import login_requiredfrom django.contrib.auth import authenticate, login, logoutfrom django.core.exceptions import ObjectDoesNotExistfrom django.http import HttpResponseRedirect, HttpResponse, Http404from JobPositions.views import addProjectInfodef normalizeUUID(posId):    posId = posId.replace("/", "")    return posIddef get_date_string(timestamp):    current = datetime.datetime.now()    date = jalali.Gregorian(timestamp.year, timestamp.month, timestamp.day)    current_date = jalali.Gregorian(current.year, current.month, current.day)    if date.persian_string("{0}") == current_date.persian_string("{0}") and date.persian_string(            "{1}") == current_date.persian_string("{1}") and date.persian_string("{2}") == current_date.persian_string(            "{2}"):        min_str = str(timestamp.minute)        if min_str.__len__() == 1:            min_str = "0" + min_str        date_string = "امروز " + str(timestamp.hour) + ":" + min_str    else:        date_string = date.persian_string() + " " + str(timestamp.hour) + ":" + str(timestamp.minute)    return date_stringdef show_main(request):    # myjobpos = JobPosition.objects.get(id='ff47c3d8-b67b-4e7f-bdce-2e88e9b167bc')    # my_offer = Job_Position_Offer.objects.filter(job_position=myjobpos)    # chosen = Chosen_Offer(JobPosition=myjobpos, Job_Position_Offer=my_offer[0])    # chosen.save()    # print('hellloooooooooooooooooooooooooo')    # print(chosen)    # print('hellloooooooooooooooooooooooooo')    main_categories = list(Category.objects.filter(parent=None))    sub_categories = []    for main_category in main_categories:        sub_categories.append(list(Category.objects.filter(parent=main_category)))    jobs = JobPosition.objects.filter(is_confirmed=1).order_by('-timestamp')[:10]    project_count = JobPosition.objects.filter(job_type="پروژه").count()    hire_count = JobPosition.objects.filter(job_type="استخدام").count()    co_count = JobPosition.objects.filter(job_type="هم‌تیمی").count()    user_count = User_Info.objects.all().count()    for job in jobs:        job.date = get_date_string(job.timestamp)    return render(request, 'main.html', {        "new_jobs": jobs,        "project_count": project_count,        "hire_count": hire_count,        "user_count": user_count,        "co_count": co_count,        "main_cat": main_categories,        "sub_cat": sub_categories,    })def register(request):    if request.method == 'POST':        register_form = RegistrationForm(request.POST)        if register_form.is_valid():            hash_amount = uuid.uuid4()            send_mail('سامانه برنامه نویسان، فعال‌سازی حساب کاربری',                      'از ثبت نام شما در سامانه‌ی برنامه نویسان متشکریم. لطفا برای تایید ثبت نام خود بر روی لینک زیر کلیک بفرمایید\nhttp://127.0.0.1:8000/register/activate_user/' + str(                          hash_amount), settings.EMAIL_HOST_USER, [register_form.cleaned_data['email']], fail_silently=False)            activate = False            user = User.objects.create_user(register_form.cleaned_data['email'], register_form.cleaned_data['email'],                                            register_form.cleaned_data['password'])            user.first_name = register_form.cleaned_data['first_name']            user.last_name = register_form.cleaned_data['last_name']            user.is_active = False            user.save()            close_date = jalali.Persian(register_form.cleaned_data['year'], register_form.cleaned_data['month'],                                        register_form.cleaned_data['day'])            year = close_date.gregorian_string("{0}")            month = close_date.gregorian_string("{1}")            day = close_date.gregorian_string("{2}")            a = datetime.datetime(int(year), int(month), int(day))            birthday = a            user_info = User_Info(user=user,                                  mobile_number=register_form.cleaned_data['mobile_number'],                                  city=register_form.cleaned_data['city'],                                  last_educational_University=register_form.cleaned_data['last_educational_University'],                                  last_educational_level=register_form.cleaned_data['last_educational_level'],                                  birthday= birthday                                  )            user_info.sending_daily_email = register_form.cleaned_data['sending_daily_email']            user_info.is_mobile_number_confirmed = True            user_info.activation_field = hash_amount            user_info.save()            return HttpResponseRedirect('/activation_mail_sent/')    else:        register_form = RegistrationForm()    return render(request, 'SignUp.html', {        'register_form': register_form,    })def activate_user(request, activation_field):    activation_field = normalizeUUID(activation_field)    if activation_field == '':        raise Http404    try:        user_info = User_Info.objects.get(activation_field=activation_field)    except ObjectDoesNotExist:        raise Http404    user_info.user.is_active = True    activate = True    user_info.activation_field = None    user_info.user.save()    user_info.save()    return render(request, 'user_activated.html', {'activate': activate})@login_required(login_url='/login/')def user_profile(request):    user_id = request.user.id    userid = str(user_id)    user = User.objects.get(pk=user_id)    firstname = user.first_name    lastname = user.last_name    my_user_info = User_Info.objects.get(user=user)    photo = my_user_info.photo    my_user_profile = User_Info.objects.get(user=user)    return render(request, 'user-profile.html', {        'user': user,        'my_user_profile': my_user_profile,        'firstname':firstname,        'lastname':lastname,        'photo':photo,    })def activation_mail_sent(request):    activate = True    return render(request, 'activation-mail-sent.html', {        'activate':activate,    })def my_login(request):    wrong_user_pass = False    if request.method == 'POST':        login_form = LoginForm(request.POST)        if login_form.is_valid():            username = request.POST['email']            password = request.POST['password']            user = authenticate(username=username, password=password)            if user:                if user.is_active:                    login(request, user)                    return HttpResponseRedirect('/user_profile/')                else:                    return HttpResponseRedirect('/activation_mail_sent/')            else:                wrong_user_pass = True                login_form = LoginForm(request.POST)    else:        login_form = LoginForm()    return render(request, "SignIn.html", {        'login_form': login_form,        'wrong_user_pass': wrong_user_pass,    })def forgot_password_getting_email(request):    wrong_username = False    if request.method == 'POST':        new_form = Forgot_password_getting_email(request.POST)        if new_form.is_valid():            username = request.POST['email']            user = User.objects.filter(username=username)            if user:                user_info = User_Info.objects.get(user=user)                user_info.forgot_password_field_hash = uuid.uuid4()                user_info.save()                send_mail('سامانه برنامه نویسان، فراموشی رمز عبور',                          'لطفا برای تنظیم دوباره‌ی رمز عبور خود، بر روی لینک زیر کلیک بفرمایید\nhttp://127.0.0.1:8000/set_new_password/' + str(                              user_info.forgot_password_field_hash), settings.EMAIL_HOST_USER, [user[0].email, ],                          fail_silently=False)                return HttpResponseRedirect('/forgot_password_email_sent/')            else:                wrong_username = True                new_form = Forgot_password_getting_email(request.POST)    else:        new_form = Forgot_password_getting_email()    return render(request, 'forgot-password-getting-email.html', {        'new_form': new_form,        'wrong_username': wrong_username,    })def forgot_password_email_sent(request):    return render(request, 'forgot-password-email-sent.html')def set_new_password(request, forgot_password_field_hash):    if forgot_password_field_hash == None:        raise Http404    try:        user_info = User_Info.objects.get(forgot_password_field_hash=forgot_password_field_hash)    except:        raise Http404    if user_info == None:        return HttpResponse("", status=400)    password_set = False    if request.method == 'POST':        new_form = Set_new_password(request.POST)        if new_form.is_valid():            user_info = User_Info.objects.get(forgot_password_field_hash=forgot_password_field_hash)            user = User.objects.get(user_info=user_info)            password = new_form.cleaned_data['password']            confirm_password = new_form.cleaned_data['password']            user.set_password(password)            user.save()            user_info.forgot_password_field_hash = None            user_info.save()            password_set = True            logout(request)            return render(request, 'SignIn.html', {                'password_set': password_set,            })    else:        new_form = Set_new_password()    return render(request, 'set-new-password.html', {        'new_form': new_form,    })@login_required(login_url='/login/')def show_new_project(request):    user_id = request.user.id    userid = str(user_id)    user = User.objects.get(pk=userid)    firstname = user.first_name    lastname = user.last_name    my_user_info = User_Info.objects.get(user=user)    photo = my_user_info.photo    myskills = Skill.objects.all()    allskills = [skill.name for skill in myskills]    if request.method == 'POST':        form = New_Project_form_job_types_form(request.POST)        form1 = File_handling(request.POST, request.FILES)        form2 = New_Project_Date_form(request.POST)        form3 = New_Project_Date_form1(request.POST)        jobtype = None        data = None        deadline = None        closing_time = None        job_type_zero = False        title_None = False        description_None = False        skills_is_None = False        date_none = False        bad_year = False        bad_month = False        bad_day = False        if (form.is_valid() and form1.is_valid() and form2.is_valid() and form3.is_valid()):            jobtype = form.cleaned_data['job_type']            if(jobtype=='0'):                job_type_zero = True            title = request.POST['title']            description = request.POST['description']            if(title==''):                title_None = True            if(description==''):                description_None = True            data = request.FILES.getlist('filename')            skills = request.POST['search-skills2']            if(skills==''):                skills_is_None = True            if (form2.cleaned_data['year'] == '' or form2.cleaned_data['month']=='' or form2.cleaned_data['day']=='' or form3.cleaned_data['year1'] == '' or form3.cleaned_data['month1']=='' or form3.cleaned_data['day1']==''):                date_none = True            if(str(form2.cleaned_data['year']).__len__()!=4 or str(form3.cleaned_data['year1']).__len__()!=4 or int(form2.cleaned_data['year'])<1390 or int(form3.cleaned_data['year1'])<1390):                bad_year = True            if ((str(form2.cleaned_data['month']).__len__() != 2 and str(form2.cleaned_data['month']).__len__() != 1) or (str(form3.cleaned_data['month1']).__len__() != 2 and str(form3.cleaned_data['month1']).__len__() != 1) or int(form2.cleaned_data['month']) > 12 or int(form3.cleaned_data['month1'])>12 or int(form2.cleaned_data['month'])<1 or int(form3.cleaned_data['month1'])<1):                bad_month = True            # (str(form2.cleaned_data['day']).__len__() != 2 and str(form2.cleaned_data['day']).__len__() != 1) or str(            #     (form3.cleaned_data['day']).__len__() != 2 and str(form3.cleaned_data['day']).__len__() != 1) or            if ( not date_none and (int(form2.cleaned_data['day']) > 32 or int(                    form3.cleaned_data['day1']) > 32 or int(form2.cleaned_data['day']) < 1 or int(                    form3.cleaned_data['day1']) < 1 )):                bad_day = True            if (not job_type_zero and not title_None and not skills_is_None  and not bad_year and not bad_month and not bad_day):                close_date = jalali.Persian(form2.cleaned_data['year'], form2.cleaned_data['month'],                    form2.cleaned_data['day'])                year = close_date.gregorian_string("{0}")                month = close_date.gregorian_string("{1}")                day = close_date.gregorian_string("{2}")                deadline = datetime.datetime(int(year), int(month), int(day))                close_date = jalali.Persian(form3.cleaned_data['year1'], form3.cleaned_data['month1'],                                            form3.cleaned_data['day1'])                year = close_date.gregorian_string("{0}")                month = close_date.gregorian_string("{1}")                day = close_date.gregorian_string("{2}")                closing_time = datetime.datetime(int(year), int(month), int(day))                user = User.objects.get(username=request.user)                user_info = User_Info.objects.get(user=user)                jobposition = JobPosition(user=user_info, title=title, description=description, job_type=jobtype,                                          deadline=deadline, closing_time=closing_time, timestamp=datetime.datetime.now())                jobposition.save()                skills = request.POST['search-skills2']                skills = re.split(',', skills)                myskill = []                for skill in skills:                    if skill == '':                        continue                    if(Skill.objects.filter(name=skill)!=[]):                        jobposition.skills.add(Skill.objects.filter(name=skill)[0])                jobposition.save()                for f in data:                    a = str(f)                    print(type(a))                    print(a)                    tokens = re.split('\.',a)                    print(tokens)                    file = myFiles(title=a, filename=f, job_position=jobposition)                    file.filename.name = str(uuid.uuid4())+ '.' + tokens[tokens.__len__()-1]                    file.save()                jobposition.save()                return HttpResponseRedirect('/position_pending/')            else:                form = New_Project_form_job_types_form()                form1 = File_handling()                form3 = New_Project_Date_form1()                form2 = New_Project_Date_form()                return render(request, 'NewProject.html', {                    'form': form,                    'form1': form1,                    'form2': form2,                    'form3': form3,                    'job_type_zero':job_type_zero,                    'skills_is_None':skills_is_None,                    'date_none':date_none,                    'bad_year':bad_year,                    'bad_month':bad_month,                    'bad_day':bad_day,                    'title_None':title_None,                    'description_None':description_None,                    'firstname': firstname,                    'lastname': lastname,                    'photo': photo,                    'mylist': allskills,                })    else:        form = New_Project_form_job_types_form()        form1 = File_handling()        form3 = New_Project_Date_form1()        form2 = New_Project_Date_form()    return render(request, 'NewProject.html', {        'form': form,        'form1': form1,        'form2': form2,        'form3': form3,        'user':user,        'firstname': firstname,        'lastname': lastname,        'photo': photo,        'mylist':allskills,    })@login_required(login_url='/login/')def edit_project(request, posId):    posId = normalizeUUID(posId)    try:        UUID(posId)    except ValueError:        raise Http404    try:        position = JobPosition.objects.get(id=posId)    except ObjectDoesNotExist:        raise  Http404    close_date = jalali.Gregorian(position.closing_time.year, position.closing_time.month,position.closing_time.day)    closing_time_year = close_date.persian_string("{0}")    closing_time_month = close_date.persian_string("{1}")    closing_time_day = close_date.persian_string("{2}")    closing_time_list = []    closing_time_list.append(closing_time_year)    closing_time_list.append(closing_time_month)    closing_time_list.append(closing_time_day)    is_closed = datetime.datetime.now() > position.closing_time    deadline = jalali.Gregorian(position.deadline.year, position.deadline.month, position.deadline.day)    deadline_year = deadline.persian_string("{0}")    deadline_month = deadline.persian_string("{1}")    deadline_day = deadline.persian_string("{2}")    deadline_list=[]    deadline_list.append(deadline_year)    deadline_list.append(deadline_month)    deadline_list.append(deadline_day)    user_id = request.user.id    userid = str(user_id)    user = User.objects.get(pk=userid)    firstname = user.first_name    lastname = user.last_name    my_user_info = User_Info.objects.get(user=user)    photo = my_user_info.photo    myskills = Skill.objects.all()    allskills = [skill.name for skill in myskills]    string_for_input = ''    my_user_info_skills = []    this_position_files = myFiles.objects.filter(job_position=position)    i=0    for skill in position.skills.all():        tmp = Skill_for_show()        tmp.skill = skill.name        string_for_input += skill.name + ','        tmp.num = i        my_user_info_skills.append(tmp)        i += 1    if request.method == 'POST':        form1 = File_handling(request.POST, request.FILES)        form2 = New_Project_Date_form(request.POST)        form3 = New_Project_Date_form1(request.POST)        jobtype = None        data = None        deadline = None        closing_time = None        job_type_zero = False        title_None = False        description_None = False        skills_is_None = False        date_none = False        bad_year = False        bad_month = False        bad_day = False        print(form1.is_valid())        print(form2.is_valid())        print(form3.is_valid())        if (form1.is_valid() and form2.is_valid() and form3.is_valid()):            jobtype = request.POST['job_type']            if(jobtype!='پروژه' and jobtype!='استخدام' and  jobtype!='هم‌تیمی'):                job_type_zero = True            title = request.POST['title']            description = request.POST['description']            if(title==''):                title_None = True            if(description==''):                description_None = True            data = request.FILES.getlist('filename')            skills = request.POST['search-skills2']            if(skills==''):                skills_is_None = True            if (form2.cleaned_data['year'] == '' or form2.cleaned_data['month']=='' or form2.cleaned_data['day']=='' or form3.cleaned_data['year1'] == '' or form3.cleaned_data['month1']=='' or form3.cleaned_data['day1']==''):                date_none = True            if(str(form2.cleaned_data['year']).__len__()!=4 or str(form3.cleaned_data['year1']).__len__()!=4 or int(form2.cleaned_data['year'])<1390 or int(form3.cleaned_data['year1'])<1390):                bad_year = True            if ((str(form2.cleaned_data['month']).__len__() != 2 and str(form2.cleaned_data['month']).__len__() != 1) or (str(form3.cleaned_data['month1']).__len__() != 2 and str(form3.cleaned_data['month1']).__len__() != 1) or int(form2.cleaned_data['month']) > 12 or int(form3.cleaned_data['month1'])>12 or int(form2.cleaned_data['month'])<1 or int(form3.cleaned_data['month1'])<1):                bad_month = True            # (str(form2.cleaned_data['day']).__len__() != 2 and str(form2.cleaned_data['day']).__len__() != 1) or str(            #     (form3.cleaned_data['day']).__len__() != 2 and str(form3.cleaned_data['day']).__len__() != 1) or            if ( int(form2.cleaned_data['day']) > 32 or int(                    form3.cleaned_data['day1']) > 32 or int(form2.cleaned_data['day']) < 1 or int(                    form3.cleaned_data['day1']) < 1 ):                bad_day = True            if (not job_type_zero and not title_None and not skills_is_None  and not bad_year and not bad_month and not bad_day):                close_date = jalali.Persian(form2.cleaned_data['year'], form2.cleaned_data['month'],                    form2.cleaned_data['day'])                year = close_date.gregorian_string("{0}")                month = close_date.gregorian_string("{1}")                day = close_date.gregorian_string("{2}")                a = datetime.datetime(int(year), int(month), int(day))                deadline = a                close_date = jalali.Persian(form3.cleaned_data['year1'], form3.cleaned_data['month1'],                                            form3.cleaned_data['day1'])                year = close_date.gregorian_string("{0}")                month = close_date.gregorian_string("{1}")                day = close_date.gregorian_string("{2}")                a = datetime.datetime(int(year), int(month), int(day))                closing_time = a                user = User.objects.get(username=request.user)                user_info = User_Info.objects.get(user=user)                position.title = title                position.description = description                position.job_type = jobtype                position.deadline = deadline                position.closing_time = closing_time                position.skills.clear()                skills = request.POST['search-skills2']                skills = re.split(',', skills)                myskill = []                for skill in skills:                    if skill == '':                        continue                    if(Skill.objects.filter(name=skill)!=[]):                        position.skills.add(Skill.objects.filter(name=skill)[0])                print("saveing...")                position.save()                print("saved!")                for file in this_position_files:                    file_check_box_input = request.POST.get(file.filename.name)                    if(file_check_box_input=='on'):                        myFiles.objects.get(filename=file.filename).delete()                    print(file.filename)                    print(file_check_box_input)                for f in data:                    a = str(f)                    tokens = re.split('\.', a)                    file = myFiles(title=a, filename=f, job_position=position)                    file.filename.name = str(uuid.uuid4()) + '.' + tokens[tokens.__len__() - 1]                    file.save()                position.save()                return HttpResponseRedirect('/position/'+posId)            else:                form1 = File_handling()                form3 = New_Project_Date_form1()                form2 = New_Project_Date_form()                return render(request, 'edit_project.html', {                    'form1': form1,                    'form2': form2,                    'form3': form3,                    'job_type_zero':job_type_zero,                    'skills_is_None':skills_is_None,                    'date_none':date_none,                    'bad_year':bad_year,                    'bad_month':bad_month,                    'bad_day':bad_day,                    'title_None':title_None,                    'description_None':description_None,                    'firstname': firstname,                    'lastname': lastname,                    'photo': photo,                    'mylist': allskills,                    'position':position,                    'deadline_year':deadline_year,                    'deadline_month':deadline_month,                    'deadline_day':deadline_day,                    'closing_time_year':closing_time_year,                    'closing_time_month':closing_time_month,                    'closing_time_day':closing_time_day,                    'my_user_info_skills': my_user_info_skills,                    'string_for_input': string_for_input,                    'this_position_files':this_position_files,                })    else:        form1 = File_handling()        form3 = New_Project_Date_form1()        form2 = New_Project_Date_form()    return render(request, 'edit_project.html', {        'form1': form1,        'form2': form2,        'form3': form3,        'user':user,        'firstname': firstname,        'lastname': lastname,        'photo': photo,        'mylist':allskills,        'position': position,        'deadline_year': deadline_year,        'deadline_month': deadline_month,        'deadline_day': deadline_day,        'closing_time_year': closing_time_year,        'closing_time_month': closing_time_month,        'closing_time_day': closing_time_day,        'my_user_info_skills': my_user_info_skills,        'string_for_input': string_for_input,        'this_position_files':this_position_files,    })def new_project_errors(request, wrong_job_type):    return render (request, 'NewProject.html', {        'wrong_job_type':wrong_job_type,    })@csrf_exempt@login_required(login_url='/login/')def new_project_get_skills(request):    if request.method == "POST":        name = request.GET.get('name', None)        # if not name:        #     return HttpResponse("", status=400)        myskills = Skill.objects.all()        users = [skill.name for skill in myskills]        return HttpResponse(json.dumps(users))def file_testing(request):    if request.method == 'POST':        form = File_handling(request.POST, request.FILES)        if form.is_valid():            data = request.FILES.getlist('filename')            file = myFiles()            file.filename = data            file.save()    else:        form = File_handling()    return render(request, 'test2.html', {        'form': form,    })@login_required(login_url='/login/')def show_comment(request, job_position_id):    posId = normalizeUUID(job_position_id)    try:        UUID(posId)    except ValueError:        raise Http404    try:        job_position = JobPosition.objects.get(id=posId)    except ObjectDoesNotExist:        raise Http404    user_id = request.user.id    userid = str(user_id)    user = User.objects.get(pk=userid)    firstname = user.first_name    lastname = user.last_name    my_user_info = User_Info.objects.get(user=user)    photo = my_user_info.photo    user_id = request.user.id    userid = str(user_id)    user = User.objects.get(pk=userid)    job_position = JobPosition.objects.get(pk= posId)    chosen_offer = Chosen_Offer.objects.filter(JobPosition=job_position_id)    chosen_offer2 = []    this_offers = []    if chosen_offer!=[]:        for tmp in chosen_offer:            if(tmp.commentScore!=None):                if(tmp.commentScore.comment_Employer_to_Employee!=''):                    this_offers.append(tmp)                    pass                else:                    chosen_offer2.append(tmp)                    continue            else:                chosen_offer2.append(tmp)            pass    if this_offers==[]:        this_offers=False    form = scoress()    return render(request, 'Comment.html', {        'this_offers':this_offers,        'chosen_offer': chosen_offer2,        'user':user,        'job_position':job_position,        'firstname': firstname,        'lastname': lastname,        'photo': photo,        'form':form,    })@login_required(login_url='/login/')def show_comment_employee_to_employer(request, job_position_id):    posId = normalizeUUID(job_position_id)    try:        UUID(posId)    except ValueError:        raise Http404    try:        job_position = JobPosition.objects.get(id=posId)    except ObjectDoesNotExist:        raise Http404    user_id = request.user.id    userid = str(user_id)    user = User.objects.get(pk=userid)    firstname = user.first_name    lastname = user.last_name    my_user_info = User_Info.objects.get(user=user)    photo = my_user_info.photo    user_id = request.user.id    userid = str(user_id)    user = User.objects.get(pk=userid)    job_position_id = normalizeUUID(job_position_id)    try:        job_position = JobPosition.objects.get(pk=job_position_id)    except ObjectDoesNotExist:        raise Http404    job_position_offer= Job_Position_Offer.objects.get(job_position=job_position, user=my_user_info)    chosen_offer = Chosen_Offer.objects.get(Job_Position_Offer=job_position_offer)    comment_submited = False    employee_comment = True    print(chosen_offer.commentScore)    # print(chosen_offer.commentScore.comment_Employee_to_Employer)    if (chosen_offer.commentScore!=None and chosen_offer.commentScore.comment_Employee_to_Employer!=None):        print("comment sub")        comment_submited = True    form = scoress()    return render(request, 'Comment.html', {        'chosen_offer': chosen_offer,        'user': user,        'job_position': job_position,        'firstname': firstname,        'lastname': lastname,        'photo': photo,        'form': form,        'comment_submited':comment_submited,        'employee_comment':employee_comment,    })@login_required(login_url='/login/')def get_comment(request, chosen_offer_id):    chosen_offer_id = normalizeUUID(chosen_offer_id)    user_id = request.user.id    userid = str(user_id)    user = User.objects.get(pk=userid)    my_user_info = User_Info.objects.get(user=user)    chose_offers = None    if request.method == 'POST':        try:            chose_offers = Chosen_Offer.objects.get(id=chosen_offer_id)        except ObjectDoesNotExist:            raise Http404        comment_score = None        if(chose_offers!=[]):            comment_score = chose_offers.commentScore            job_position_offer = Job_Position_Offer.objects.get(id=chose_offers.Job_Position_Offer.id)            job_position = JobPosition.objects.get(id=Job_Position_Offer.objects.get(id=chose_offers.Job_Position_Offer.id).job_position.id)            if(str(job_position.user.user.username) == str(my_user_info.user.username)):                if(request.POST['have-worked-with']=='همکاری داشته‌ام'):                    chose_offers.commentScore = CommentScore(cooperation_status=request.POST['have-worked-with'],                                                             comment_Employer_to_Employee=request.POST['description'],                                                             score_Employer_to_Employee=request.POST['scores'])                    send_mail('سامانه برنامه نویسان، ثبت نظر در مورد موقعیت کاری',                              '\n http://127.0.0.1:8000/show_comment_employee_to_employer/'+ str(job_position.id) + '/' +'\n'+'کاربر با نام :'+ user.first_name +' '+ user.last_name+'\n'+'در مورد موقعیت کاری با نام: «'+job_position.title+'»گفته است که با شما:«'+request.POST['have-worked-with']+ '» لطفا شما نیز با استفاده از صفحه‌ی لینک بالا نظر خود را در مورد کاربر مذکور بفرمایید '+ ' امتیاز داده شده به شما از 5: '+  request.POST['scores'] + ' نظر داده شده در مورد شما: «'+'\.\n'+request.POST['description']                              ,                              settings.EMAIL_HOST_USER, [job_position_offer.user.user.email],                              fail_silently=False)                else:                    chose_offers.commentScore = CommentScore(cooperation_status=request.POST['have-worked-with'])                    send_mail('سامانه برنامه نویسان، ثبت نظر در مورد موقعیت کاری',                              '\nhttp://127.0.0.1:8000/show_comment_employee_to_employer/' + str(                                  job_position.id) + '/' +'\n'+'کاربر با نام :'+ user.first_name +' '+ user.last_name+'\n' +'  در مورد موقعیت کاری با نام  ' + job_position.title+ ' لطفا شما نیز با استفاده از صفحه‌ی لینک در ادامه آمده نظر خود را در مورد کاربر مذکور بفرمایید.' +'\n'+request.POST[                                  'have-worked-with'] + 'گفته است که: با شما'                              ,                              settings.EMAIL_HOST_USER, [job_position_offer.user.user.email],                              fail_silently=False)                chose_offers.commentScore.save()                chose_offers.save()                return HttpResponseRedirect('/comment/' + str(job_position.id) + '/')            elif(job_position_offer.user == my_user_info):                if(chose_offers.commentScore==None):                    chose_offers.commentScore = CommentScore(comment_Employee_to_Employer=request.POST['description'],                                                             score_Employee_to_Employer=request.POST['scores'])                    chose_offers.commentScore.save()                    chose_offers.save()                    send_mail('سامانه برنامه نویسان، ثبت نظر در مورد موقعیت کاری',                                  '\n http://127.0.0.1:8000/comment/' + str(                                      job_position.id) + '/' + '\n' + 'کاربر با نام :' + user.first_name + ' ' + user.last_name + '\n' + 'در مورد موقعیت کاری با نام: «' + '» لطفا شما نیز با استفاده از صفحه‌ی لینک بالا نظر خود را در مورد کاربر مذکور بفرمایید ' + ' امتیاز داده شده به شما از 5: ' +                                  request.POST['scores'] + ' نظر داده شده در مورد شما: «' + '\.\n' + request.POST[                                      'description']                                  ,                                  settings.EMAIL_HOST_USER, [job_position.user.user.email],                                  fail_silently=False)                    print(job_position.user.user.email)                else:                    chose_offers.commentScore.comment_Employee_to_Employer = request.POST['description']                    chose_offers.commentScore.score_Employee_to_Employer = request.POST['scores']                    chose_offers.commentScore.save()                    chose_offers.save()                return HttpResponseRedirect('/show_comment_employee_to_employer/' + str(job_position.id) + '/')    return Http404@login_required(login_url='/login/')def position_pending(request):    position_pending1 = 'true'    return render(request, 'activation-mail-sent.html', {        'position_pending1': position_pending1,    })@login_required(login_url='/login/')def logout_view(request):    logout(request)    return HttpResponseRedirect('/login/')city_types = {    '1': 'تهران',    '2': 'اصفهان',    '3': 'شیراز',    '4': 'یزد',    '5': 'مشهد',}educational_level_types = {    '0':'مدرک تحصیلی',    '1':'دیپلم',    '2': 'فوق دیپلم',    '3': 'کارشناسی',    '4': 'کارشناشی ارشد',    '5': 'دکتری',}@login_required(login_url='/login/')def profile_pic_setting(request):    user_id = request.user.id    userid = str(user_id)    user = User.objects.get(pk=userid)    my_user_info = User_Info.objects.get(user=user)    if request.method == 'POST':        form = File_handling(request.POST, request.FILES)        if form.is_valid():            data = request.FILES.get('image')            my_user_info.photo = data            my_user_info.save()    return HttpResponseRedirect('/user_info/')class Skill_for_show:    def __init__(self):        self.skill = ''        self.num = ''@login_required(login_url='/login/')def show_my_skills(request):    user_id = request.user.id    userid = str(user_id)    user = User.objects.get(pk=userid)    firstname = user.first_name    lastname = user.last_name    my_user_info = User_Info.objects.get(user=user)    photo = my_user_info.photo    myskills = Skill.objects.all()    allskills = [skill.name for skill in myskills]    if request.method == 'POST':        skills = request.POST['search-skills2']        if (skills != ''):            skills = request.POST['search-skills2']            skills = re.split(',', skills)            my_user_info.skills.clear()            for skill in skills:                if skill == '':                    continue                my_user_info.skills.add(Skill.objects.filter(name=skill)[0])    my_user_info_skills = []    this_user_skills = my_user_info.skills.all()    i = 0    string_for_input = ''    for skill in this_user_skills:        tmp = Skill_for_show()        tmp.skill = skill.name        string_for_input += skill.name + ','        tmp.num = i        my_user_info_skills.append(tmp)        i+=1    return render(request, 'show_my_skills.html', {        'user': user,        'firstname': firstname,        'lastname': lastname,        'photo': photo,        'mylist': allskills,        'my_user_info_skills':my_user_info_skills,        'string_for_input':string_for_input,    })@login_required(login_url='/login/')def change_password(request):    user_id = request.user.id    userid = str(user_id)    user = User.objects.get(pk=userid)    firstname = user.first_name    lastname = user.last_name    my_user_info = User_Info.objects.get(user=user)    photo = my_user_info.photo    if request.method == 'POST':        new_form = Change_Password(request.POST)        if new_form.is_valid():            old = new_form.cleaned_data['old_password']            user = authenticate(username=request.user, password=old)            if user:                if user.is_active:                    user = User.objects.get(username=request.user)                    user.set_password(new_form.cleaned_data['password'])                    user.save()                    logout(request)                    return render(request, 'SignIn.html',{                        'password_set':True,                    })    else:        new_form = Change_Password()    return render(request, 'change-password.html', {        'user': user,        'firstname': firstname,        'lastname': lastname,        'photo': photo,        'new_form': new_form,    })    passdef profile_editing(request):    passdef about(request):    return render(request, 'about.html')def contact(request):    return render_to_response('contact.html')def privacy(request):    return render_to_response('privacy.html')def hire(request):    return render_to_response('hire.html')def how_to(request):    return render_to_response('how_to.html')def trust(request):    return render_to_response('trust.html')def law(request):    return render_to_response('law.html')@login_required(login_url='/login/')def user_info(request):    user_id = request.user.id    userid = str(user_id)    user = User.objects.get(pk=userid)    firstname = user.first_name    lastname = user.last_name    user_info = User_Info.objects.get(user=user)    photo = user_info.photo    bad_date = False    bad_mobile = False    start_date = jalali.Gregorian(user_info.birthday.year, user_info.birthday.month,                                  user_info.birthday.day)    year = start_date.persian_string("{0}")    month = start_date.persian_string("{1}")    day = start_date.persian_string("{2}")    if request.method == 'POST':        register_edit_form = Edit_registrtaion(request.POST, request.FILES)        # user = User.objects.get(username=request.user)        # user_info = User_Info.objects.get(user=user)        if(request.POST['first_name']!=''):            user.first_name = request.POST['first_name']        if (request.POST['first_name'] != ''):            user.last_name = request.POST['last_name']        user.save()        if( request.POST['year']!='' and request.POST['month'] !='' and request.POST['day']!='' and str(request.POST['year']).__len__()==4  and int(request.POST['year'])>1310 and (str(request.POST['month']).__len__() == 2 or str(request.POST['month']).__len__() == 1) and (        str(request.POST['day']).__len__() == 2 or str(request.POST['day']).__len__() == 1) and int(            request.POST['day']) < 32 and int(request.POST['month']) < 13 and int(            request.POST['day']) > 0 and int(request.POST['month']) > 0):                close_date = jalali.Persian(request.POST['year'], request.POST['month'],                                            str(request.POST['day']))                year = close_date.gregorian_string("{0}")                month = close_date.gregorian_string("{1}")                day = close_date.gregorian_string("{2}")                a = datetime.datetime(int(year), int(month), int(day))                user_info.birthday = a        else:            bad_date = True        if(str(request.POST['mobile_number']).__len__()!=11 and  request.POST['mobile_number']!=''):            bad_mobile = True        if(request.POST['mobile_number']!='' and str(request.POST['mobile_number']).__len__()==11):            user_info.mobile_number = request.POST['mobile_number']        user_info.city = request.POST['city']        city = request.POST['city']        if(city!='0'):            user_info.city = city_types[city]        if (request.POST['last_educational_University'] != ''):            user_info.last_educational_University = request.POST['last_educational_University']        if (educational_level_types[request.POST['last_educational_level']] != '0'):            user_info.last_educational_level = educational_level_types[request.POST['last_educational_level']]        tmp = request.POST.get('sending_daily_email')        if (tmp == 'on'):                user_info.sending_daily_email = True        user_info.save()        start_date = jalali.Gregorian(user_info.birthday.year, user_info.birthday.month,                                      user_info.birthday.day)        year = start_date.persian_string("{0}")        month = start_date.persian_string("{1}")        day = start_date.persian_string("{2}")        year = year        return render(request, 'user_infos.html',{            'user': user,            'my_user_info':user_info,            'firstname': request.POST['first_name'],            'lastname': request.POST['last_name'],            'photo': photo,            'register_edit_form': register_edit_form,            'year': year,            'month': month,            'day': day,            'bad_date': bad_date,            'bad_mobile': bad_mobile,        })    register_edit_form = Edit_registrtaion()    return render(request, 'user_infos.html',{            'user': user,            'my_user_info':user_info,            'firstname': firstname,            'lastname': lastname,            'photo': photo,            'register_edit_form':register_edit_form,            'year':year,            'month':month,            'day':day,        })